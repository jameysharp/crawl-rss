import urllib.parse
import xml.sax
from html.entities import codepoint2name as codepoint2name
from typing import Any, Optional

__contributors__: Any
USER_AGENT: Any
ACCEPT_HEADER: str
PREFERRED_XML_PARSERS: Any
RESOLVE_RELATIVE_URIS: int
SANITIZE_HTML: int
ACCEPTABLE_URI_SCHEMES: Any

class sgmllib:
    class SGMLParser:
        def goahead(self, i: Any) -> None: ...
        def parse_starttag(self, i: Any) -> None: ...

charref: Any
tagfind: Any
attrfind: Any
entityref: Any
incomplete: Any
interesting: Any
shorttag: Any
shorttagopen: Any
starttagopen: Any

class _EndBracketRegEx:
    endbracket: Any = ...
    def __init__(self) -> None: ...
    def search(self, target: Any, index: int = ...): ...

class EndBracketMatch:
    match: Any = ...
    def __init__(self, match: Any) -> None: ...
    def start(self, n: Any): ...

endbracket: Any

class ThingsNobodyCaresAboutButMe(Exception): ...
class CharacterEncodingOverride(ThingsNobodyCaresAboutButMe): ...
class CharacterEncodingUnknown(ThingsNobodyCaresAboutButMe): ...
class NonXMLContentType(ThingsNobodyCaresAboutButMe): ...
class UndeclaredNamespace(Exception): ...

SUPPORTED_VERSIONS: Any

class FeedParserDict(dict):
    def __getattr__(self, key: Any): ...

class _FeedParserMixin:
    namespaces: Any = ...
    can_be_relative_uri: Any = ...
    can_contain_relative_uris: Any = ...
    can_contain_dangerous_markup: Any = ...
    html_types: Any = ...
    feeddata: Any = ...
    encoding: Any = ...
    entries: Any = ...
    version: str = ...
    namespacesInUse: Any = ...
    infeed: int = ...
    inentry: int = ...
    incontent: int = ...
    intextinput: int = ...
    inimage: int = ...
    inauthor: int = ...
    incontributor: int = ...
    inpublisher: int = ...
    insource: int = ...
    ingeometry: int = ...
    sourcedata: Any = ...
    contentparams: Any = ...
    namespacemap: Any = ...
    elementstack: Any = ...
    basestack: Any = ...
    langstack: Any = ...
    baseuri: Any = ...
    lang: Any = ...
    svgOK: int = ...
    title_depth: int = ...
    depth: int = ...
    psc_chapters_flag: Any = ...
    property_depth_map: Any = ...
    def __init__(
        self,
        baseuri: Optional[Any] = ...,
        baselang: Optional[Any] = ...,
        encoding: str = ...,
    ) -> None: ...
    def unknown_starttag(self, tag: Any, attrs: Any): ...
    def unknown_endtag(self, tag: Any) -> None: ...
    def handle_charref(self, ref: Any) -> None: ...
    def handle_entityref(self, ref: Any): ...
    def handle_data(self, text: Any, escape: int = ...) -> None: ...
    def handle_comment(self, text: Any) -> None: ...
    def handle_pi(self, text: Any) -> None: ...
    def handle_decl(self, text: Any) -> None: ...
    def parse_declaration(self, i: Any): ...
    def mapContentType(self, contentType: Any): ...
    def trackNamespace(self, prefix: Any, uri: Any) -> None: ...
    def resolveURI(self, uri: Any): ...
    def decodeEntities(self, element: Any, data: Any): ...
    def strattrs(self, attrs: Any): ...
    def push(self, element: Any, expectingText: Any) -> None: ...
    def pop(self, element: Any, stripWhitespace: int = ...): ...
    def pushContent(
        self, tag: Any, attrsD: Any, defaultContentType: Any, expectingText: Any
    ) -> None: ...
    def popContent(self, tag: Any): ...
    @staticmethod
    def lookslikehtml(s: Any): ...

class _StrictFeedParser(_FeedParserMixin, xml.sax.handler.ContentHandler):
    bozo: int = ...
    exc: Any = ...
    decls: Any = ...
    def __init__(self, baseuri: Any, baselang: Any, encoding: Any) -> None: ...
    def startPrefixMapping(self, prefix: Any, uri: Any) -> None: ...
    def startElementNS(self, name: Any, qname: Any, attrs: Any) -> None: ...
    def characters(self, text: Any) -> None: ...
    def endElementNS(self, name: Any, qname: Any) -> None: ...
    def error(self, exc: Any) -> None: ...
    warning: Any = ...
    def fatalError(self, exc: Any) -> None: ...

class _BaseHTMLProcessor(sgmllib.SGMLParser):
    special: Any = ...
    bare_ampersand: Any = ...
    elements_no_end_tag: Any = ...
    encoding: Any = ...
    def __init__(self, encoding: Any, _type: Any) -> None: ...
    pieces: Any = ...
    def reset(self) -> None: ...
    def goahead(self, i: Any) -> None: ...
    def parse_starttag(self, i: Any): ...
    def feed(self, data: Any) -> None: ...
    def normalize_attrs(self, attrs: Any): ...
    def unknown_starttag(self, tag: Any, attrs: Any) -> None: ...
    def unknown_endtag(self, tag: Any) -> None: ...
    def handle_charref(self, ref: Any) -> None: ...
    def handle_entityref(self, ref: Any) -> None: ...
    def handle_data(self, text: Any) -> None: ...
    def handle_comment(self, text: Any) -> None: ...
    def handle_pi(self, text: Any) -> None: ...
    def handle_decl(self, text: Any) -> None: ...
    def convert_charref(self, name: Any): ...
    def convert_entityref(self, name: Any): ...
    def output(self): ...
    def parse_declaration(self, i: Any): ...

class _LooseFeedParser(_FeedParserMixin, _BaseHTMLProcessor):
    entities: Any = ...
    def __init__(
        self, baseuri: Any, baselang: Any, encoding: Any, entities: Any
    ) -> None: ...
    def decodeEntities(self, element: Any, data: Any): ...
    def strattrs(self, attrs: Any): ...

class _RelativeURIResolver(_BaseHTMLProcessor):
    relative_uris: Any = ...
    baseuri: Any = ...
    def __init__(self, baseuri: Any, encoding: Any, _type: Any) -> None: ...
    def resolveURI(self, uri: Any): ...
    def unknown_starttag(self, tag: Any, attrs: Any) -> None: ...

class _HTMLSanitizer(_BaseHTMLProcessor):
    acceptable_elements: Any = ...
    acceptable_attributes: Any = ...
    unacceptable_elements_with_end_tag: Any = ...
    acceptable_css_properties: Any = ...
    acceptable_css_keywords: Any = ...
    valid_css_values: Any = ...
    mathml_elements: Any = ...
    mathml_attributes: Any = ...
    svg_elements: Any = ...
    svg_attributes: Any = ...
    svg_attr_map: Any = ...
    svg_elem_map: Any = ...
    acceptable_svg_properties: Any = ...
    unacceptablestack: int = ...
    mathmlOK: int = ...
    svgOK: int = ...
    def reset(self) -> None: ...
    def unknown_starttag(self, tag: Any, attrs: Any) -> None: ...
    def unknown_endtag(self, tag: Any) -> None: ...
    def handle_pi(self, text: Any) -> None: ...
    def handle_decl(self, text: Any) -> None: ...
    def handle_data(self, text: Any) -> None: ...
    def sanitize_style(self, style: Any): ...
    def parse_comment(self, i: Any, report: int = ...): ...

class _FeedURLHandler(
    urllib.request.HTTPDigestAuthHandler,
    urllib.request.HTTPRedirectHandler,
    urllib.request.HTTPDefaultErrorHandler,
):
    def http_error_default(
        self, req: Any, fp: Any, code: Any, msg: Any, headers: Any
    ): ...
    def http_error_301(self, req: Any, fp: Any, code: Any, msg: Any, hdrs: Any): ...
    http_error_300: Any = ...
    http_error_302: Any = ...
    http_error_303: Any = ...
    http_error_307: Any = ...
    def http_error_401(self, req: Any, fp: Any, code: Any, msg: Any, headers: Any): ...

def registerDateHandler(func: Any) -> None: ...

timezonenames: Any
EBCDIC_MARKER: Any
UTF16BE_MARKER: Any
UTF16LE_MARKER: Any
UTF32BE_MARKER: Any
UTF32LE_MARKER: Any
ZERO_BYTES: Any
RE_XML_DECLARATION: Any
RE_XML_PI_ENCODING: Any

def convert_to_utf8(http_headers: Any, data: Any): ...

RE_ENTITY_PATTERN: Any
RE_DOCTYPE_PATTERN: Any
RE_SAFE_ENTITY_PATTERN: Any

def replace_doctype(data: Any): ...
def parse(
    url_file_stream_or_string: Any,
    etag: Optional[Any] = ...,
    modified: Optional[Any] = ...,
    agent: Optional[Any] = ...,
    referrer: Optional[Any] = ...,
    handlers: Optional[Any] = ...,
    request_headers: Optional[Any] = ...,
    response_headers: Optional[Any] = ...,
): ...
